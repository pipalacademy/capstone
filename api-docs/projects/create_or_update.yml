# TODO: Use PUT for creation also
# TODO: Include created and last_modified fields in the response
# TODO: include URL
endpoint: /api/projects/<project-name>
method: PUT
title: Create or update a project
description: Create a new project or update it if it already exists
authenticated: true
request:
  path_parameters:
    - name: name
      type: string
      description: Project name
      example: build-your-own-shell
      required: true
  query_parameters: []
  body:
    type: object
    example: |
      # TODO: no need to take position for tasks
      {
        "name": "build-your-own-shell",
        "title": "Build your own Shell",
        "short_description": "A short description of the project, in Markdown format. This is displayed on the Project's card on the home page and dashboard.",
        "description": "In this project, we will build a Unix shell from scratch.\n\nWe'll use the Python's `subprocess` library to build shell.\n\n# Learning outcomes\n- Unix\n- Python\n",
        "tags": ["Python", "Unix"],
        "created": "2023-02-07T06:50:07.984844+00:00",
        "last_modified": "2023-02-07T06:50:07.984844+00:00",
        "tasks": [
            {
              "name": "stdin-and-stdout",
              "title": "Stdin and stdout",
              "description": "Take input from stdin and simply echo it to stdout in a loop."
            },
            {
              "name": "write-a-parser",
              "title": "Write a parser",
              "description": "Write a parser for shell. This part of description can include *italic*, **bold**, `code`, and other markdown formatting."
            }
        ]
      }
    properties:
      - name: name
        type: string
        description: Project name
        example: build-your-own-shell
        required: true
      - name: title
        type: string
        description: Human readable title of project
        example: Build your own Shell
        required: true
      - name: short_description
        type: string
        description: |
          Short description in Markdown format
        example: Learn the internals of Unix system by building your own Unix shell
        required: true
      - name: description
        type: string
        description: |
          A long description in Markdown format
        example: |
          In this project, we will build a Unix shell from scratch.

          We'll use the Python's `subprocess` library to build shell.

          # Learning outcomes
          - Unix
          - Python
        required: true
      - name: is_active
        type: boolean
        description: "Whether project is visible on projects page (default: `true`)"
        required: false
      - name: tags
        type: array[string]
        description: Project tags
        each:
          type: string
        example: |
          ["Python", "Unix"]
        required: true
      - name: tasks
        type: array[task]
        description: Array of tasks associated with this Project
        required: true
        each:
          type: object
          properties:
            - name: name
              type: string
              description: The unique identifier for this task, as defined by the course creator.
              example: "write-a-parser"
              required: true
            - name: position
              type: Integer
              description: The position of the Task in sequence
              example: 2
              required: true
            - name: title
              type: string
              description: Title of the Task
              example: "Write a parser"
              required: true
            - name: description
              type: string
              description: Description of the task in markdown format.
              example: |
                Write a parser for shell. This part of description can
                include *italic*, **bold**, `code`, and other markdown formatting.
              required: true
          example: |
            {
              "name": "write-a-parser",
              "position": 2,
              "title": "Write a parser",
              "description": "Write a parser for shell. This part of description can include *italic*, **bold**, `code`, and other markdown formatting.",
            }
response:
  type: object
  description: The created Project object (status 200), or an error (status 4XX)
  example: |
    {
      "name": "build-your-own-shell",
      "title": "Build your own Shell",
      "short_description": "A short description of the project, in Markdown format. This is displayed on the Project's card on the home page and dashboard.",
      "description": "In this project, we will build a Unix shell from scratch.\n\nWe'll use the Python's `subprocess` library to build shell.\n\n# Learning outcomes\n- Unix\n- Python\n",
      "is_active": true,
      "tags": ["Python", "Unix"],
      "tasks": [
          {
            "name": "stdin-and-stdout",
            "title": "Stdin and stdout",
            "description": "Take input from stdin and simply echo it to stdout in a loop."
          },
          {
            "name": "write-a-parser",
            "title": "Write a parser",
            "description": "Write a parser for shell. This part of description can include *italic*, **bold**, `code`, and other markdown formatting."
          }
      ]
    }
  properties:
    - name: name
      type: string
      description: Project name
      example: build-your-own-shell
      required: true
    - name: title
      type: string
      description: Human readable title of project
      example: Build your own Shell
      required: true
    - name: short_description
      type: string
      description: |
        Short description in Markdown format
      example: Learn the internals of Unix system by building your own Unix shell
      required: true
    - name: description
      type: string
      description: |
        A long description in Markdown format
      example: |
        In this project, we will build a Unix shell from scratch.

        We'll use the Python's `subprocess` library to build shell.

        # Learning outcomes
        - Unix
        - Python
      required: true
    - name: is_active
      type: boolean
      description: Whether project is visible on projects page
      required: true
    - name: tags
      type: array[string]
      description: Project tags
      each:
        type: string
      example: |
        ["Python", "Unix"]
      required: true
    - name: created
      type: string
      required: true
      description: Creation timestamp as an ISO8601 date string
      example: "2023-02-07T06:50:07.984844+00:00"
    - name: last_modified
      type: string
      required: true
      description: Last modified timestamp as an ISO8601 date string
      example: "2023-02-07T06:50:07.984844+00:00"
    - name: tasks
      type: array[task]
      description: Array of task objects contained in this project
      required: true
      each:
        type: object
        properties:
          - name: name
            type: string
            description: The unique identifier for this task, as defined by the course creator.
            example: "write-a-parser"
            required: true
          - name: position
            type: Integer
            description: The position of the Task in sequence
            example: 2
            required: true
          - name: title
            type: string
            description: Title of the Task
            example: "Write a parser"
            required: true
          - name: description
            type: string
            description: Description of the task in markdown format.
            example: |
              Write a parser for shell. This part of description can
              include *italic*, **bold**, `code`, and other markdown formatting.
            required: true
        example: |
          {
            "name": "write-a-parser",
            "position": 2,
            "title": "Write a parser",
            "description": "Write a parser for shell. This part of description can include *italic*, **bold**, `code`, and other markdown formatting.",
          }
notes:
  The body should have all the project fields as a JSON.
  This will return a status 404 response when a project with this name doesn't exist. This will return a status 400 response
  when the body doesn't have all the required fields.
